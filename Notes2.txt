What happens when you initialize a repository? 
	creates the .git file that tracks changes

Why do you need to do it?
	because .git file is what makes the git repository a git repository - otherwise it is just a normal folder

How is the staging area different from the working directory and the repository? 
	staging is different from the working dir in that not all files in the working dir are going to be a part of the staging area - maybe files that you never want to change - working dir is a gen folder - staging area is for files that we want to add to the git repository

What value do you think it offers?
	the value of a working dir being seperated from the staging area is that it allows us to have a logical place to keep our files in the same folder but not have to add them all to the git repository

How can you use the staging area to make sure you have one commit per logical change?
	Probably best practice to only add the files relevant to the major change per each commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are great for testing experimental features or differeing versions of a program or application - allow testing without a commitment to the master branch

How do the diagrams help you visualize the branch structure?
	The diagrams help to understand where you are within the various versions of the overall structure. It could easily help with when you need to decide where it is best to merge various versions onto the master.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Auto merges make obvious intended changes automatically update - without it things would be practically impossible to update without hours of manual review
	Cons are that without proper notes and version control it can cause serious harm to the master branch

	Always doing manual merges is good because it means that things happen slowly and carefully but the con is that it is extrmemly slow and tedious

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
